<style>
.spinner-circlebg {
  opacity: 0;
}

.spinner-circle {
    stroke: var(--color-accent, #000);
    stroke-dasharray: 192.617;
    stroke-dashoffset: 192.617; /* Adjust the initial value */
    transition: stroke-dashoffset 0.2s ease;
}

</style>

<div
  data-loaded="false"
  class="loader-header fixed top-0 left-0 w-full h-full z-[1000] overflow-hidden bg-black/50 backdrop-blur-sm flex justify-center items-center"
>
<h2 class="loader-logo absolute inset-0 flex justify-center items-center cursor-default pointer-events-none" data-astro-cid-gfoemipl="">

  <svg xmlns="http://www.w3.org/2000/svg" width="400" height="120" viewBox="0 0 400 120" aria-labelledby="logo_title" data-astro-cid-gfoemipl="" class="max-w-full h-auto">

  <title id="logo_title">Ruslan Shmidt Real Estate Logo</title>

  <!-- House Icon (scaled and positi3oned version of provided icon) -->
  <g transform="translate(10, 10) scale(0.3)">
    <g>
      <path fill="#000000" d="M106,5.8C88.8,9.1,76.1,20.4,72.1,36c-1.2,4.7-1,6.3,1.1,7.3c2.7,1.3,3.7,0.5,6.6-5.4c2.2-4.5,3.1-5.7,6.8-9.4c4.8-4.8,8.9-7.2,15-8.9c5.5-1.5,15.8-1.5,23.5,0c8.2,1.6,19.7,5.6,31.1,10.7c17,7.7,25.5,10,37.2,9.9c5.3,0,7.7-0.2,10.7-1.1c10.5-2.8,18.6-9,22.6-17.4c1.9-3.9,2-5.7,0.2-7.2c-0.7-0.6-1.7-1.1-2.2-1.1c-0.5,0-2.9,1.9-5.5,4.6c-6.8,6.9-11.9,9-22,9c-9.1,0-18.5-2.6-31.8-8.7c-12.7-5.8-22.5-9.3-32.6-11.4C125.1,5.1,111.9,4.7,106,5.8z"/>
      <path fill="#000000" d="M57.4,56.4c-0.5,0.5-0.4,53,0.1,53.2c0.2,0-7.3,6.3-16.9,13.7c-25.8,20.3-24.4,18.8-24.4,24.2c0,6.1,5.9,10.8,11.8,9.5c2.4-0.5-1.5,2.4,52.3-39.9C103.7,98.7,123.8,83,125,82.4c3-1.7,7.8-1.7,10.8,0C137,83,158.7,100,184,119.9c25.4,20,46.7,36.5,47.4,36.8c0.7,0.2,2.6,0.4,4.3,0.3c2.5-0.1,3.4-0.4,4.9-1.7c5-4,5.6-10.5,1.3-14.7c-1.9-1.8-100.5-79.7-104.7-82.5c-1.7-1.2-2.9-1.7-5.2-1.8c-5.4-0.5-5.8-0.2-23.9,14C99,77.4,91.4,83.3,91.3,83.3c-0.1,0-0.2-6.1-0.2-13.6V56.1H74.4C65.2,56.1,57.5,56.2,57.4,56.4z"/>
      <path fill="#FFFFFF" stroke="#000000" stroke-width="1" d="M88.6,127.6l-41.5,32.7l-0.2,33.2l-0.2,33.2l-5.1,1.1c-9.7,2.2-23.8,6.8-28,9.2c-6.1,3.4-3.8,12.9,3.1,13c1,0,4-0.8,7-2c10.4-4.1,23.9-7.4,37.5-9.2c8.8-1.2,30.1-1.2,38.6,0c8.5,1.2,16.9,3,24.5,5.2c16.1,4.8,25.3,6.3,40.4,6.7c15.5,0.4,26.5-0.7,41.3-4.3c11.6-2.8,29.8-9.7,36.1-13.6c2.6-1.7,4-3.9,4-6.4c0-3.5-2.6-6.4-6.2-6.9c-1.6-0.2-2.8,0.2-7.6,2.5c-6,2.9-16.3,7-17.5,7c-0.6,0-0.7-4.6-0.7-34.4l0-34.3l-41.3-32.5C149.8,109.8,131,95.1,130.6,95C130.3,95,111.4,109.6,88.6,127.6z M125.5,164.4v11.7h-11.7h-11.7v-11.7v-11.7h11.7h11.7V164.4z M158.6,164.4v11.7h-11.7h-11.7v-11.7v-11.7h11.7h11.7V164.4z M125.5,197.4v11.7h-11.7h-11.7v-11.7v-11.7h11.7h11.7V197.4z M158.6,197.4v11.7h-11.7h-11.7v-11.7v-11.7h11.7h11.7V197.4z"/>
    </g>
  </g>

  <!-- Text "Ruslan Shmidt" -->
  <text
    x="130"
    y="70"
    font-family="Arial, sans-serif"
    font-size="32"
    font-weight="bold"
    fill="#000000"
  >
    Ruslan Shmidt
  </text>
</svg>

  </h2>

  <div
  <div
  class="loader-spinner absolute left-1/2 bottom-[10%] transform -translate-x-1/2 cursor-default pointer-events-none"
>
  <!-- Spinner SVG code here -->
</div>  >
    <svg
      class="spinner-inner block my-0 mx-auto md:w-14 md:h-14 w-10 h-10"
      viewBox="0 0 80 80"
      stroke-width="9"
      fill="none"
      stroke-linecap="round"
      stroke-miterlimit="10"
      aria-labelledby="loading spinner"
    >
      <path
        class="spinner-circlebg"
        stroke="#ddd"
        d="M40,10C57.351,10,71,23.649,71,40.5S57.351,71,40.5,71 S10,57.351,10,40.5S23.649,10,40.5,10z"
      ></path>
      <path
        id="spinner-circle"
        class="spinner-circle"
        d="M40,10C57.351,10,71,23.649,71,40.5S57.351,71,40.5,71 S10,57.351,10,40.5S23.649,10,40.5,10z"
      ></path>
    </svg>
  </div>

<!-- Initial loading spinner and logo animations -->
<style lang="sass">
  .spinner-circle
    stroke: var(--color-accent)
    transition: stroke-dashoffset 0.2s

  // 1. Animate logo and spinner in from below
  .loader-logo,
  .loader-spinner
    opacity: 1
    animation: moveUp 1s cubic-bezier(0.7,0,0.3,1) both

  .loader-spinner
    animation-delay: .2s

    @keyframes moveUp 
      from 
          opacity: 0
          transform: translate3d(0, 100px, 0)
      
      to 
          opacity: 1
          transform: translate3d(0, 0, 0)
    
  
  

  // 2. Animate logo out on loading end
  .logo-path-1
    // Initial logo colors
    fill: var(--color-accent)
    stroke: var(--color-accent)
  .logo-path-2
    fill: var(--color-accent)
    stroke: var(--color-accent)
  .logo-path-3
    fill: var(--color-accent)
    stroke: var(--color-accent)

  // Logo colors on loading end
  .loader-header[data-loaded="true"]
    .logo-path-1
      transition: all 0.5s ease 0.3s
      fill: var(--color-secondary)
      stroke: var(--color-secondary)

    .logo-path-2
      transition: all 0.5s ease 0.3s
      fill: var(--color-accent)
      stroke: var(--color-accent)

    .logo-path-3
      transition: all 0.5s ease 0.3s
      fill: var(--color-secondary)
      stroke: var(--color-secondary)

  // Logo position on loading end
  .loader-header[data-loaded="true"]
    .loader-logo
      transform-origin: 50% 0
      animation: moveLogoOnFinish 1s cubic-bezier(0.7,0,0.3,1) forwards

  :root
    --logo-translate-x: calc(-50vw + 70px)
    --logo-scale: 0.55

  @media(min-width: 768px)
    :root
      --logo-translate-x: calc(-50vw + 60px)
      --logo-scale: 0.45
  @media(min-width: 1024px)
    :root
      --logo-translate-x: calc(-50vw + 100px)
      --logo-scale: 0.35

  @keyframes moveLogoOnFinish
    to
      transform: translate3d(0, 100%,0) translate3d(var(--logo-translate-x),2.5vh,0) scale3d(var(--logo-scale),var(--logo-scale),1)

  // 3. Animate spinner out on loading end
  .loader-header[data-loaded="true"]
    .loader-spinner
      animation: moveSpinnerOnFinish 0.5s cubic-bezier(0.7,0,0.3,1) forwards

  @keyframes moveSpinnerOnFinish
    to
      opacity: 0
      transform: translate3d(0,-100%,0) scale3d(0.3,0.3,1)

  // 4. Animate header out on loading end
  .loader-header[data-loaded="true"]
    animation: moveHeaderOnFinish 1s cubic-bezier(0.7,0,0.3,1) forwards

  @keyframes moveHeaderOnFinish
    to
      transform: translate3d(0,-100%,0)
</style>

<!-- Apply animations to page content - after loading screen  -->
<style is:global lang="sass">
  body[data-loaded="true"]
    .loaded-hero-heading,
    .loaded-hero-button,
    .loaded-hero-links,
    .loaded-hero-buttons,
    .loaded-hero-logo
      animation: animLoadedContent 1s cubic-bezier(0.7,0,0.3,1) both
    .loaded-hero-links
      animation-delay: .07s
    .loaded-hero-heading
      animation-delay: .2s
    .loaded-hero-buttons
      animation-delay: .15s
    .loaded-hero-button
      animation-delay: .3s

  @keyframes animLoadedContent
    from
      opacity: 0
      transform: translate3d(0,200px,0)
</style>

<!-- Listen to loading events and hide loading screen -->
<script is:inline>
const loadingProgressState = {
  progress: 0,
  hasLoaded: false,
};

let circlePathLength; // Define the variable in a broader scope

// Query spinner element
const spinner = document.getElementById("spinner-circle"); // as HTMLElement & SVGPathElement
const spinnerContainer = document.querySelector(".loader-header"); // as HTMLElement;

if (spinner) {
    circlePathLength = spinner.getTotalLength(); // Initialize the variable
    spinner.style.strokeDasharray = circlePathLength + '';
    spinner.style.strokeDashoffset = circlePathLength + '';
}

// Allow to re-render spinner progress
const renderSpinnerCircle = (progress) => {
  const offset = circlePathLength * (1 - progress);
  spinner.style.strokeDashoffset = offset + "";
};

// Generate progress values from 0 to 1
const progressEstimated = () => {
  const interval = setInterval(() => {
    // If the page has really loaded stop the loading animation
    if (loadingProgressState.hasLoaded) {
      spinnerContainer.setAttribute("data-loaded", "true");
      document.body.setAttribute("data-loaded", "true");

      // Clear loading-screen related styles not to meddle with other animations
      setTimeout(() => {
        document.body.removeAttribute("data-loaded");
        spinnerContainer.style.visibility = "hidden";
      }, 1300);

      clearInterval(interval);
    }

    // Pretend that we have calculated loading time
    loadingProgressState.progress += Math.random() * 0.1;

    if (loadingProgressState.progress >= 0.8) {
      loadingProgressState.progress = 0.87;
    }

    renderSpinnerCircle(loadingProgressState.progress);
  }, 100);
};

window.addEventListener("load", () => {
  loadingProgressState.progress = 1;
  loadingProgressState.hasLoaded = true;
});

// Wait until initial animation is finished and then start loading
spinnerContainer.addEventListener(
  "animationend",
  () => {
    // Start loading
    progressEstimated();
  },
  { once: true }
);
</script>